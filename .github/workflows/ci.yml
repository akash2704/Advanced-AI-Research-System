name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run tests
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
      run: poetry run pytest tests/ -v --cov=kairon --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run black
      run: poetry run black . --check

    - name: Run isort
      run: poetry run isort . --check-only

    - name: Run flake8
      run: poetry run flake8 .

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run bandit
      run: poetry run bandit -r kairon

    - name: Run safety
      run: poetry run safety check

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Build documentation
      run: poetry run mkdocs build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site 